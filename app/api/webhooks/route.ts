// app/api/webhooks/route.ts

import { NextRequest, NextResponse } from "next/server";
import { Octokit } from "octokit";
// –ü—É—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à jsconfig/tsconfig. 
// –ó–¥–µ—Å—å –º—ã –±–µ—Ä—ë–º openai –∏–∑ app/openai.ts
import { openai } from "../../openai"; 

const GH_OWNER = "vlaskov67";
const GH_REPO  = "vlaskov-store";
const GH_TOKEN = process.env.GITHUB_TOKEN!;

export async function POST(req: NextRequest) {
  // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π issue
  const event = req.headers.get("x-github-event");
  if (event !== "issues") return NextResponse.json({ ignored: true });
  const payload = await req.json();
  if (payload.action !== "opened") return NextResponse.json({ skipped: true });

  const title       = payload.issue.title;
  const body        = payload.issue.body || "";
  const issueNumber = payload.issue.number;
  console.log("üì• –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:", title);

  const octokit = new Octokit({ auth: GH_TOKEN });

  // 2) –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–ø–∫–∏ docs
  let docsContent = "";
  try {
    const docsRes = await octokit.rest.repos.getContent({
      owner: GH_OWNER,
      repo: GH_REPO,
      path: "docs",
    });
    if (Array.isArray(docsRes.data)) {
      for (const file of docsRes.data) {
        if (file.download_url) {
          let txt = await fetch(file.download_url).then((r) => r.text());
          docsContent += `–§–∞–π–ª: ${file.name}\n` +
                         `${txt.slice(0, 2000)}\n\n---\n\n`;
        }
      }
    }
  } catch (e) {
    console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å docs:", e);
  }

  // 3) –§–æ—Ä–º–∏—Ä—É–µ–º prompt
  const prompt = `
–¢—ã –æ–ø—ã—Ç–Ω—ã–π Laravel-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–µ–µ –¢–ó:

${docsContent}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
${title}

${body}

–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "files": [
    {
      "path": "–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.php",
      "content": "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"
    }
  ]
}

–ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON!
`;

  // 4) –í—ã–∑—ã–≤–∞–µ–º OpenAI
  const completion = await openai.chat.completions.create({
    model: "gpt-4.1",               // <- –º–æ–¥–µ–ª—å –∏–∑ Playground
    messages: [{ role: "user", content: prompt }],
    temperature: 0.2,
  });

  const answer = completion.choices[0].message?.content ?? "{}";
  console.log("üõ∞Ô∏è OpenAI –æ—Ç–≤–µ—Ç:", answer);

  // 5) –ü–∞—Ä—Å–∏–º JSON
  let files: Array<{ path: string; content: string }>;
  try {
    const parsed = JSON.parse(answer);
    if (!Array.isArray(parsed.files)) {
      throw new Error("parsed.files –Ω–µ –º–∞—Å—Å–∏–≤");
    }
    files = parsed.files;
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e, "‚Äî –æ—Ç–≤–µ—Ç:", answer);
    return NextResponse.json({
      error: true,
      message: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenAI: " + e.message,
    });
  }

  // 6) –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
  const branchName = `auto/issue-${issueNumber}`;
  const mainRef = await octokit.rest.git.getRef({
    owner: GH_OWNER,
    repo: GH_REPO,
    ref: "heads/main",
  });
  await octokit.rest.git.createRef({
    owner: GH_OWNER,
    repo: GH_REPO,
    ref: `refs/heads/${branchName}`,
    sha: mainRef.data.object.sha,
  });

  // 7) –°–æ–∑–¥–∞—ë–º blob‚Äô—ã –∏ –¥–µ—Ä–µ–≤–æ
  const treeItems = [];
  for (const f of files) {
    const blob = await octokit.rest.git.createBlob({
      owner: GH_OWNER,
      repo: GH_REPO,
      content: f.content,
      encoding: "utf-8",
    });
    treeItems.push({
      path: f.path.trim(),
      mode: "100644",
      type: "blob",
      sha: blob.data.sha,
    });
  }
  const tree = await octokit.rest.git.createTree({
    owner: GH_OWNER,
    repo: GH_REPO,
    base_tree: mainRef.data.object.sha,
    tree: treeItems,
  });

  // 8) –ö–æ–º–º–∏—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ref
  const commit = await octokit.rest.git.createCommit({
    owner: GH_OWNER,
    repo: GH_REPO,
    message: `auto: resolve issue #${issueNumber}`,
    tree: tree.data.sha,
    parents: [mainRef.data.object.sha],
  });
  await octokit.rest.git.updateRef({
    owner: GH_OWNER,
    repo: GH_REPO,
    ref: `heads/${branchName}`,
    sha: commit.data.sha,
  });

  // 9) –û—Ç–∫—Ä—ã–≤–∞–µ–º Pull Request
  await octokit.rest.pulls.create({
    owner: GH_OWNER,
    repo: GH_REPO,
    title: `auto: resolve #${issueNumber}`,
    head: branchName,
    base: "main",
    body: "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π PR –ø–æ issue",
  });

  return NextResponse.json({ status: "PR created" });
}
